0 - ClearScreen:
----------------
usage: real(0,Clr_UpDateLCD

Clr_UpdateLCD = Toggle LCD update 0 = No, 1 = Yes

This function Clears the graph buffer and the LCD.


1 - DrawSprite:
---------------
usage: real(1,Spr_X,Spr_Y,Spr_Width,SprHeight,sPIC_Num,sPIC_X,sPIC_Y,Spr_Method,Spr_Flip,Spr_UpDateLCD

Spr_X = Sprite X location
Spr_Y = Sprite Y location
Spr_Width = Sprite width in BYTES (so a 16 pixel wide sprite would have a width of 2)
Spr_Height = Sprite height in pixels
sPIC_Num = The PIC in which the sprite is located PIC0 - PIC9
sPIC_X = X offset to sprite in PIC, must be ALIGNED. Can be a value from 0-11
sPIC_Y = Y offset to sprite in PIC
Spr_Method = The copy method 0 = Overwrite, 1 = AND, 2 = OR, 3 = XOR
Spr_Flip = Flip Sprite 0 = No Flip, 1 = Horizontal Flip
Spr_UpdateLCD = Toggle LCD update 0 = No, 1 = Yes

This function will draw clipped sprites of ANY size anywhere on the screen.

Dont forget that sprites always have a width which is a multiple of 8. However with this routine we
want the BYTE width of the sprite. It is 8 pixels per byte! So a 8x8 sprite has a BYTE width of 1,
a 16x16 sprite would have a BYTE width of 2. A 12x12 sprite would still occupy 2 BYTES so it also has a
BYTE width of 2.

sPIC_X is only at ALIGNED positions, can be a value from 0-11
sPIC_Y can be from 0-63

Horizontal Sprite Flipping has now been implemented. This should save you some space.

This function will still be able to read PIC data even if it is archived!


2 - DrawTileMap:
----------------
usage: real(2,Matrice_Name,X_Offset,Y_Offset,MapWidth,MapHeight,ScreenStartX,
ScreenEndX,ScreenStartY,ScreenEndY,mPIC_Num,Tile_Method,Tile_Size,Map_UpdateLCD

Matrice_Name = Name of matrice containing map data 0 - 9. 0 = [A] - 9 = [J]
X_Offsett = X Map Offsett. Which part of the map you wish to start drawing at
Y_Offsett = Y Map Offsett. Which part of the map you wish to start drawing at
MapWidth = Width of TileMap
MapHeight = Height of TileMap
ScreenStartX = Which COLUMN you wish to START drawing. Can be a value from 0-12 for 8x8 or 0-6 for 16x16
ScreenEndX = Which COLUMN you wish to END drawing at. Can be a value from 0-12 for 8x8 or 0-6 for 16x16
ScreenStartY = Which ROW you wish to START drawing. Can be a value from 0-8 for 8x8 or 0-4 for 16x16
ScreenEndY = Which ROW you wish to END drawing at. Can be a value from 0-8 for 8x8 or 0-4 for 16x16
mPIC_Num = The PIC in which the tile data is located PIC0 - PIC255
Tile_Method = The copy method 0 = Overwrite, 1 = AND, 2 = OR, 3 = XOR
Tile_Size = Size of tiles, 8 = 8x8, 16 = 16x16
Map_UpdateLCD = Toggle LCD update 0 = No, 1 = Yes

The ScreenStartX, ScreenEndX, ScreenStartY, ScreenEndY enable you to draw a 'windowed' map. This means that you can draw
your map and leave space for a HUD or something similar. Drawing smaller maps will also be a little faster.

To draw an 8x8 tilesize map centered with a 1 tile blank border the inputs would be:

ScreenStartX = 1
ScreenEndX = 11
ScreenStartY = 1
ScreenEndY = 7

The TileMap routine now supports MULTIPLE PICS and 16-bit TILE INDEX's. This means that you can have a map with more than
256 different tiles. If a tile is >95 it will overlap to the next PIC (if it exists).

PICS must follow each other numerically!!!!

So if your input PIC is PIC0 any tiles > 95 will be taken from PIC1 and any tiles > 191 will be taken from PIC2.

If the PIC doesnt exist then the tile will be drawn as a BLANK.

This function will still be able to read PIC data even if it is archived! But it may slow things down.


3 - RecallPIC
-------------
usage: real(3,rPIC_Num,rPIC_Method,Recall_UpdateLCD

rPIC_Num = PIC to recall PIC0 - PIC255
rPIC_Method = The copy method 0 = Overwrite, 1 = AND, 2 = OR, 3 = XOR
Recall_UpdateLCD = Toggle LCD update 0 = No, 1 = Yes

This will recall a pic and display it with some options (OR, XOR etc)

This function will still be able to read PIC data even if it is archived!


4 - ScrollScreen
----------------
usage: real(4,Scrl_Direction,Scrl_Number,Scrl_UpdateLCD

Scrl_Direction = direction to scroll
Scrl_Number = number of pixels to scroll
Scrl_UpdateLCD = Toggle LCD update 0 = No, 1 = Yes

Directions:

0 - Up
1 - Down
2 - Left
3 - Right
4 - UpLeft
5 - UpRight
6 - DownLeft
7 - DownRight


5 - ChangeContrast
------------------
usage: real(5,Contrast_Function,ContrastVal

Contrast_Function = Contrast returned in Ans (0-39). 0 = Set Contrast, 1 = Get Contrast
ContrastVal = New contrast value. Can be a value from 0-39


6 - UpdateLCD
-------------
usage: real(6

This function will copy the graph buffer to the LCD


7 - RunIndicator
----------------
usage: real(7,runIndicVal

runIndicVal = Toggle Run Indicator. 0 = Off, 1 = On


8 - GetKey
----------
usage: real(8

Scans the keypad and returns a key code in the ANS variable.

Has support for multiple Arrow Keypresses

Key Codes:
----------
F1		=	53
F2		=	52
F3		=	51
F4		=	50
F5		=	49
		
2nd		=	54
Mode		=	55
Del		=	56

Down		=	1
Left		=	2
Right		=	3
Up		=	4

DownLeft	=	5
DownRight	=	6
UpLeft	=	7
UpRight	=	8

Alpha		=	48
XTN		=	40
Stat		=	32
Math		=	47
Apps		=	39
Prgm		=	31
Vars		=	23
Clear		=	15
X1		=	46
Sin		=	38
Cos		=	30
Tan		=	22
Power		=	14
X2		=	45
Comma		=	37
LeftPara	=	29
RightPara	=	21

Divide	=	13
Multiply	=	12
Subtract	=	11
Add		=	10
Enter		=	9
Log		=	44
Ln		=	43
Sto		=	42

0		=	33
1		=	34
2		=	26
3		=	18
4		=	35
5		=	27
6		=	19
7		=	36
8		=	28
9		=	20

Period	=	141
Negative	=	140


9 - CreatePIC
-------------
usage: real(9,cPIC_Funtion,cPIC_Num

cPIC_Function = Function to perform. 0 = StorePIC, 1 = DeletePIC
cPIC_Num = Number of PIC file to store to. Ranges from 1-255

*NOTE* PIC0 is actually PIC10 according to the TIOS. To store to PIC0
use: real(9,10

*IMPORTANT* Because the PIC's use tokens in their name that the TIOS doesnt really
have (for PICS) the names in your memory mgmt will be all strange, ex:

PIC0
inString(
P/Y
Z-Test(

THIS IS PERFECTLY NORMAL, nothing is wrong with your calc. The TIOS just doesnt have
the names for PIC variables above the 10th.

To transfer these PICs to your calc you MUST GROUP THEM. Sending may fail if you
attempt to send them individually.


10 - ExecuteArchivedProg
------------------------
usage: "PRGMNAME:real(10,exAction,Prgm_Dest:prgmXTEMP0XX

"PRGMNAME = Name of program to be stored in the ANS variable. Program can be ARCHIVED or in RAM
exAction = Action to perform. 0 = copy, 1 = clean specific, 2 = clean all
Prgm_Dest = Destination XTEMP program. Ranges from 0-15

This function will copy a program from the ARCHIVE or RAM to one of 16 XTEMP programs. The name of the
program to copy must be stored in the ANS variable prior to running this function.

This function will work with BASIC and TIOS ASM (nostub) programs.

For example, to copy the BASIC program ADEMO to XTEMP000 you would do:

"ADEMO
real(10,0,0

To copy the BASIC program MAP1 to XTEMP011, and then RUN XTEMP011 you would do:

"MAP1
real(10,0,11
prgmXTEMP011

To copy the **TIOS ASM** program SCROLL to XTEMP009, and then RUN XTEMP009 you would do:

"SCROLL
real(10,0,11
Asm(prgmXTEMP011

To REMOVE program XTEMP006 you would do:

real(10,1,6

To REMOVE ALL XTEMP0XX programs you would do:

real(10,2,0

*NOTE* If the XTEMP0XX program already exists (in RAM or ARCHIVE) then this function will exit
without copying. You must manually remove the target program before attempting to
replace it. (This is to stop accidents with nested programs trying to replace themselves).


11 - GetCalcVersion
-------------------
usage: real(11

Returns a code in the ANS variable which will tell you what calc version you are running.

83+		= 0
83+ SE	= 1
84+		= 2
84+ SE	= 3


12 - DrawShape
--------------
usage: real(12,Shape_Type,x1,y1,x2,y2,DrawShape_UpdateLCD

Shape_Type = Tpye of Shape you want to draw:
0 = DrawSingleLineBlack
1 = DrawSingleLineWhite
2 = DrawSingleLineInvert
3 = DrawEmptyRectangleBlack
4 = DrawEmptyRectangleWhite
5 = DrawEmptyRectangleInvert
6 = DrawFilledRectangleBlack
7 = DrawFilledRectangleWhite
8 = DrawFilledRectangleInvert
9 = DrawRectOutlineBlackFillWhite
10 = DrawRectOutlineWhiteFillBlack

x1 = First x coord (for rectangles this is TOP LEFT corner)
y1 = First y coord (for rectangles this is TOP LEFT corner)
x2 = Second x coord (for rectangles this is BOTTOM RIGHT corner)
y2 = Second y coord (for rectangles this is BOTTOM RIGHT corner)
Scrl_UpdateLCD = Toggle LCD update 0 = No, 1 = Yes


13 - TextMode
--------------
usage: real(13,TextFunction,Text_Char

TextFunction = 0 = Normal, 1 = Inverse, 2 = Lowercase on, 3 = Lowercase off, 4 = Display Character
If TextFunction = 4: Text_Char = Number of character to display (0 - 255).

When Lowercase is enabled, press ALPHA twice to enter lowercase mode in the TIOS.

*NOTE* Some TIOS functions (like errors and some menus) automatically reset these textflag's to Normal.


14 - CheckRAM
-------------
usage: real(14

Returns the amount of FREE RAM in ANS
